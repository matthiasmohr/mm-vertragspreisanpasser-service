@startuml

class Contract {
  ProductSerialNumber: string
 }

class PriceAdjustmentProject {
  ID: UUID
  Name: String
  Comment: String
  Creator: String
  CreationTime: DateTime
  Confirmer: String
  ConfirmationTime: DateTime
  UpdatedTime: DateTime
  Executor: String
  ExecutionTime: DateTime
  Locked: Bool
  --
  NewPriceAdjustmentProject()
  GetPriceAdjustmentProject()
  SignoffPriceAdjustmentProject()
  ExecutePriceAdjustmentProject()
}

class PriceChangeRuleCollection {
    ID: UUID
    PriceAdjustmentProject: REF
    --
    NewPriceChangeRuleCollection()
}

class PriceChangeRule {
    ID: UUID
    PriceChangeRuleCollection: REF
    ..
    //
    RestoreMarginAtSignup: bool
    ChangeBasePriceNetToAmount: float
    ChangeKwhPriceNetToAmount: float
    ChangeBasePriceNetByAmount: float
    ChangeKwhPriceNetByAmount: float
    ChangeBasePriceNetByFactor: float
    ChangeKwhPriceNetByFactor: float
    // Define Validity & Exclutions
	ValidForProductNames: []string
	ValidForCommodity: string
	ExcludeOrderDateFrom: DateTime
	ExcludeStartDateFrom: DateTime
	ExcludeEndDateUntil: DateTime
	ExcludeLastPriceChangeSince: DateTime
	..
	// Define Limits
	LimitToCataloguePriceNet: bool
	LimitToUpperBasePriceNet: float
	LimitToUpperKwhPriceNet: float
	LimitToLowerBasePriceNet: float
	LimitToLowerKwhPriceNet: float
	LimitToMaxChangeBasePriceNet: float
	LimitToMaxChangeKwhPriceNet: float
	LimitToMinChangeBasePriceNet: float
    LimitToMinChangeKwhPriceNet: float
    ..
    OrderInPriceChangeRuleCollection
    --
    Create()
    List()
    Remove()
    MoveUpPriceChangeRule()
    MoveDownPriceChangeRule()
}

class ContractInformation {
    ID: UUID
    Snapshot-Time DateTime
    ..
    Mba: String
    ProductSerialNumber: String // index
    ProductName: String // index
    InArea: Bool
    Commodity: string // index
    ..
    // Contract terms
    AnnualConsumption: float
    OrderDate: date
    StartDate: date
    EndDate: date
    Status: string
    PriceGuaranteeUntil: date
    PriceChangePlanned: bool
    ..
    // Current pricing data
    PriceValidSince: date
    CurrentBaseCosts: float
    CurrentKwhCosts: float
    CurrentBaseMargin: float
    CurrentKwhMargin: float
    CurrentBasePriceNet: float
    CurrentKwhPriceNet: float
    --
    CountAll()
    CountAllWithFilters()
    Find()
    List()
    Save()
}

class PriceChangeOrder {
    ID: UUID
    PriceChangeRule: REF
    ContractInformation: REF
    ..
    ProductSerialNumber: string
    Status
    ..
    // Current pricing data
    PriceValidSince: date
    CurrentBaseCosts: float
    CurrentKwhCosts: float
    CurrentBaseMargin: float
    CurrentKwhMargin: float
    CurrentBasePriceNet: float
    CurrentKwhPriceNet: float
    AnnualConsumption: float
    ..
    // Desired new pricing data
    PriceValidAsOf: date
    FutureBaseCosts: float
    FutureKwhCosts: float
    FutureKwhMargin: float
    FutureBaseMargin: float
    FutureBasePriceNet: float
    FutureKwhPriceNet: float
    AgentHintFlag: bool
    AgentHintText: string
    CommunicationFlag: bool
    CommunicationTime: DateTime
    --
    CountAll()
    CountAllWithFilters()
    Find()
    List()
    Save()
    Execute()
}

class PriceChangeExecution {
    ID: UUID
    CreatedAt: DateTime
    ProductSerialNumber: string
    PriceChangeOrder: string
    ..
    Status: string
    ExecutionTime: DateTime
    PricechangerResponse: string
    ..
    // Desired new pricing data
    PriceValidAsOf: date
    CurrentBasePriceNet: float
    FutureBasePriceNet: float
    CurrentKwhPriceNet: float
    FutureKwhPriceNet: float
    AgentHintFlag: bool
    AgentHintText: string
    CommunicationFlag: bool
    CommunicationTime: DateTime
    AnnualConsumption: float
    --
    ConfirmExecuted()
    ConfirmCancelled()
    ConfirmError()
}

PriceAdjustmentProject "1" -- "1" PriceChangeRuleCollection
PriceChangeRuleCollection "1" -- "n" PriceChangeRule
PriceChangeRuleCollection "1" -- "n" PriceChangeOrder
Contract "1" -- "n" ContractInformation
Contract "1" -- "n" PriceChangeOrder
PriceChangeOrder "1" -- "1" PriceChangeExecution
@enduml
